<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>管理博客源码</title>
    <link href="/2025/05/10/%E7%AE%A1%E7%90%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81/"/>
    <url>/2025/05/10/%E7%AE%A1%E7%90%86%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="管理博客源码"><a href="#管理博客源码" class="headerlink" title="管理博客源码"></a>管理博客源码</h2><hr><h3 id="正确操作步骤"><a href="#正确操作步骤" class="headerlink" title="正确操作步骤"></a><strong>正确操作步骤</strong></h3><ol><li><p><strong>确保 <code>.gitignore</code> 文件正确</strong><br>Hexo 初始化时通常会自动生成 <code>.gitignore</code>，其中会忽略 <code>public/</code>、<code>node_modules/</code> 等目录。检查你的 <code>.gitignore</code> 是否包含以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gitignore">/public<br>/node_modules<br>/.deploy_git<br></code></pre></td></tr></table></figure></li><li><p><strong>切换到新分支 <code>hexo-source</code></strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b hexo-source<br></code></pre></td></tr></table></figure></li><li><p><strong>提交源码（无需删除任何内容）</strong><br>直接提交 Hexo 项目文件（不包括被 <code>.gitignore</code> 忽略的文件）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;初始化 Hexo 源码&quot;</span><br>git push origin hexo-source<br></code></pre></td></tr></table></figure></li><li><p><strong>后续更新流程</strong>  </p><ul><li>写新文章后，先推送到 <code>hexo-source</code> 分支：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;更新文章：xxx&quot;</span><br>git push origin hexo-source<br></code></pre></td></tr></table></figure></li><li>再部署静态文件到 <code>main</code>&#x2F;<code>master</code> 分支：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="为什么不需要删除分支内容？"><a href="#为什么不需要删除分支内容？" class="headerlink" title="为什么不需要删除分支内容？"></a><strong>为什么不需要删除分支内容？</strong></h3><ul><li>Hexo 的 <code>deploy</code> 命令（<code>hexo-deployer-git</code>）会自动将 <code>public/</code> 下的静态文件推送到 <code>main</code>&#x2F;<code>master</code> 分支，与 <code>hexo-source</code> 分支完全隔离。</li><li><code>hexo-source</code> 分支仅保存源码（如 Markdown 文章、主题配置等），而 GitHub Pages 只会读取 <code>main</code>&#x2F;<code>master</code> 分支的静态文件。</li></ul><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><ol><li><p><strong>不要手动删除 <code>hexo-source</code> 分支的文件</strong><br>如果误删了 <code>_config.yml</code>、<code>themes/</code> 等关键文件，会导致本地无法生成静态文件。</p></li><li><p><strong>首次部署前确保 <code>main</code>&#x2F;<code>master</code> 分支为空</strong>  </p><ul><li>如果 <code>main</code>&#x2F;<code>master</code> 分支已有内容（如 GitHub 自动生成的 <code>README.md</code>），建议先清空该分支，否则部署可能冲突。</li><li>清空方法：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout --orphan temp-branch<br>git commit -m <span class="hljs-string">&quot;初始化空分支&quot;</span><br>git branch -D main  <span class="hljs-comment"># 删除本地 main 分支</span><br>git branch -m main  <span class="hljs-comment"># 重命名当前分支为 main</span><br>git push -f origin main<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>区分两个分支的作用</strong>  </p><ul><li><code>hexo-source</code>：存储源码（你本地编辑的文件）。</li><li><code>main</code>&#x2F;<code>master</code>：存储 Hexo 生成的静态文件（自动由 <code>hexo deploy</code> 推送）。</li></ul></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>不需要</strong> 手动删除 <code>hexo-source</code> 分支的内容，直接提交即可。</li><li>保持 <code>.gitignore</code> 正确，避免提交 <code>public/</code> 等无关文件。</li><li>两个分支互不干扰：源码在 <code>hexo-source</code>，静态页面在 <code>main</code>&#x2F;<code>master</code>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客部署到GitHub Pages的说明</title>
    <link href="/2025/05/10/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20Pages%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
    <url>/2025/05/10/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20Pages%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="要将Hexo博客部署到GitHub-Pages，可以按照以下步骤操作："><a href="#要将Hexo博客部署到GitHub-Pages，可以按照以下步骤操作：" class="headerlink" title="要将Hexo博客部署到GitHub Pages，可以按照以下步骤操作："></a>要将Hexo博客部署到GitHub Pages，可以按照以下步骤操作：</h1><hr><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a><strong>1. 准备工作</strong></h2><ul><li><strong>安装 Hexo</strong>（如果尚未安装）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><strong>创建 Hexo 项目</strong>（如果还没有）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init my-blog<br><span class="hljs-built_in">cd</span> my-blog<br>npm install<br></code></pre></td></tr></table></figure></li><li><strong>确保 Git 已安装</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure>如果没有，请先安装 <a href="https://git-scm.com/">Git</a>。</li></ul><hr><h2 id="2-创建-GitHub-仓库"><a href="#2-创建-GitHub-仓库" class="headerlink" title="2. 创建 GitHub 仓库"></a><strong>2. 创建 GitHub 仓库</strong></h2><ol><li><p><strong>在 GitHub 上新建仓库</strong>：</p><ul><li>仓库名格式必须为：<code>&lt;你的用户名&gt;.github.io</code>（例如 <code>yourusername.github.io</code>）。</li><li>如果是项目站点（非个人主页），可以任意命名，但需在 <code>_config.yml</code> 中额外配置。</li></ul></li><li><p><strong>初始化本地 Git 并关联远程仓库</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git remote add origin https://github.com/yourusername/yourusername.github.io.git<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="3-安装-Hexo-部署插件"><a href="#3-安装-Hexo-部署插件" class="headerlink" title="3. 安装 Hexo 部署插件"></a><strong>3. 安装 Hexo 部署插件</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><hr><h2 id="4-配置-config-yml"><a href="#4-配置-config-yml" class="headerlink" title="4. 配置 _config.yml"></a><strong>4. 配置 <code>_config.yml</code></strong></h2><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件末尾找到 <code>deploy</code> 部分，修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/yourusername/yourusername.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># 或 master（GitHub 默认分支）</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;更新博客内容&quot;</span>  <span class="hljs-comment"># 可选，部署时的提交信息</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：  </p><ul><li>如果使用 SSH 方式，<code>repo</code> 可写为 <code>git@github.com:yourusername/yourusername.github.io.git</code>。  </li><li>确保缩进正确（2 个空格）。</li></ul></blockquote><hr><h2 id="5-生成静态文件并部署"><a href="#5-生成静态文件并部署" class="headerlink" title="5. 生成静态文件并部署"></a><strong>5. 生成静态文件并部署</strong></h2><ol><li><p><strong>生成静态文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate<br></code></pre></td></tr></table></figure><p>（或简写 <code>hexo clean &amp;&amp; hexo g</code>）</p></li><li><p><strong>部署到 GitHub</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>（或简写 <code>hexo d</code>）</p></li><li><p><strong>访问博客</strong>：<br>稍等几分钟后，打开 <code>https://yourusername.github.io</code> 即可查看。</p></li></ol><hr><h2 id="6-可选：自定义域名"><a href="#6-可选：自定义域名" class="headerlink" title="6. 可选：自定义域名"></a><strong>6. 可选：自定义域名</strong></h2><ol><li><strong>在仓库的 <code>Settings &gt; Pages</code> 里设置自定义域名</strong>（如 <code>blog.yourdomain.com</code>）。</li><li><strong>在 Hexo 的 <code>source</code> 目录下创建 <code>CNAME</code> 文件</strong>（无后缀）：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">blog.yourdomain.com<br></code></pre></td></tr></table></figure></li><li>重新部署：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="7-管理博客源码（推荐）"><a href="#7-管理博客源码（推荐）" class="headerlink" title="7. 管理博客源码（推荐）"></a><strong>7. 管理博客源码（推荐）</strong></h2><p>为了避免丢失本地文件，建议将 Hexo 源码也推送到 GitHub：</p><ol><li><strong>新建一个分支（如 <code>hexo-source</code>）</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b hexo-source<br></code></pre></td></tr></table></figure></li><li><strong>提交代码</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;初始化 Hexo 源码&quot;</span><br>git push origin hexo-source<br></code></pre></td></tr></table></figure></li><li>以后更新博客时，先提交源码，再部署：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;更新文章&quot;</span><br>git push origin hexo-source<br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><h3 id="1-部署后页面-404？"><a href="#1-部署后页面-404？" class="headerlink" title="1. 部署后页面 404？"></a><strong>1. 部署后页面 404？</strong></h3><ul><li>检查仓库名是否正确（必须是 <code>&lt;username&gt;.github.io</code>）。</li><li>确保 <code>branch</code> 是 <code>main</code> 或 <code>master</code>（与 GitHub 默认分支一致）。</li></ul><h3 id="2-部署失败（权限错误）？"><a href="#2-部署失败（权限错误）？" class="headerlink" title="2. 部署失败（权限错误）？"></a><strong>2. 部署失败（权限错误）？</strong></h3><ul><li>如果使用 SSH，确保已添加公钥到 GitHub。</li><li>如果使用 HTTPS，可能需要输入 GitHub 账号密码（推荐改用 <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">SSH</a> 或 <a href="https://github.com/settings/tokens">Personal Access Token</a>）。</li></ul><h3 id="3-如何更新博客？"><a href="#3-如何更新博客？" class="headerlink" title="3. 如何更新博客？"></a><strong>3. 如何更新博客？</strong></h3><ul><li>修改文章后，重新执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python虚拟环境配置</title>
    <link href="/2025/05/10/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/05/10/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="python虚拟环境配置"><a href="#python虚拟环境配置" class="headerlink" title="python虚拟环境配置"></a>python虚拟环境配置</h1><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><ul><li>使用virtualenv创建虚拟环境，名称：my_ml_env，表示我的机器学习环境。</li></ul><h3 id="安装所需的包"><a href="#安装所需的包" class="headerlink" title="安装所需的包"></a>安装所需的包</h3><ul><li>管理员身份运行下列命令<ul><li>pip install virtualenv</li><li>pip install virtualenvwrapper-win</li></ul></li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>确保你的系统环境变量中包含 Python 的 Scripts 文件夹路径，并配置 WORKON_HOME。<ul><li>打开 系统属性。</li><li>进入 高级 &gt; 环境变量。</li><li>在 系统变量 中找到 Path，并添加 Python 的 Scripts 文件夹路径（例如：C:\Python39\Scripts）。</li><li>新建一个名为 WORKON_HOME 的变量，值为你希望创建虚拟环境的路径（例如：C:\Users\YourUsername\Envs）。</li></ul></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>virtualenvwrapper-win 提供了一些常用命令来管理虚拟环境：</p><ul><li>创建虚拟环境：mkvirtualenv myenv &#x2F; mkvirtualenv –python&#x3D;python3.6 myenv</li><li>列出所有虚拟环境：lsvirtualenv 或 workon</li><li>激活虚拟环境：workon myenv</li><li>退出虚拟环境：deactivate</li><li>删除虚拟环境：rmvirtualenv myenv</li><li>查看虚拟环境中的安装包：pip list</li></ul><h3 id="虚拟环境添加到jupyter"><a href="#虚拟环境添加到jupyter" class="headerlink" title="虚拟环境添加到jupyter"></a>虚拟环境添加到jupyter</h3><ul><li>在虚拟环境中执行安装所需包：<ul><li>pip install jupyter</li><li>pip install ipykernel</li><li>python -m ipykernel install –name 虚环境名称 –display-name 虚环境名称 –user</li></ul></li></ul><h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><ul><li>使用conda创建虚拟环境，名称：conda_ml_env，表示conda机器学习环境。</li><li><a href="https://blog.csdn.net/2302_76846184/article/details/138009420">Anaconda3+Pycharm 搭建深度学习环境；安装不同框架；配置两个环境；Anaconda配置国内镜像源</a></li></ul><h3 id="在conda中创建环境步骤"><a href="#在conda中创建环境步骤" class="headerlink" title="在conda中创建环境步骤"></a>在conda中创建环境步骤</h3><pre><code class="hljs">* 打开Anaconda Prompt(Anaconda3)* 执行下面命令，可以指定基于特定版本的python环境；    * conda create --name wuyi python=3.7.1* 激活环境：conda activate conda_ml_env</code></pre><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>conda create –name YourName python&#x3D;3.8.8  # 创建环境 YourName 是你需要命名的环境，比如可以命名为yolov5，后面的python&#x3D;python版本</li><li>conda activate YourName  # 激活环境你的环境</li><li>cd D:&#x2F;DeepLearning&#x2F;  # cd到有DeepLearning的目录   cd是切换目录命令</li><li>pip install -r requirements.txt  # 安装项目需要的所有包</li><li>conda env list  # 查看所有环境</li><li>conda list  # 查看所有包</li><li>conda remove -n YourEnvName –all  # 删除虚拟环境</li></ul><h3 id="虚拟环境添加到jupyter-1"><a href="#虚拟环境添加到jupyter-1" class="headerlink" title="虚拟环境添加到jupyter"></a>虚拟环境添加到jupyter</h3><ul><li>虚拟环境中安装所需要的包<ul><li>pip install jupyter</li><li>pip install ipykernel</li><li>python -m ipykernel install –name 虚环境名称 –display-name 虚环境名称 –user</li></ul></li></ul><h2 id="删除jupyter中的虚拟环境"><a href="#删除jupyter中的虚拟环境" class="headerlink" title="删除jupyter中的虚拟环境"></a>删除jupyter中的虚拟环境</h2><ul><li>cmd查看所有的环境 jupyter kernelspec list</li><li>删除环境 jupyter kernelspec remove myenv</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客网站搭建</title>
    <link href="/2025/05/10/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/05/10/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="网站搭建教程"><a href="#网站搭建教程" class="headerlink" title="网站搭建教程"></a>网站搭建教程</h2><ul><li>参考教程<a href="https://juejin.cn/post/7491524668001107994">从零开始搭建属于你自己的博客（GitHub Pages+Hexo)</a></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>总结，涵盖博客开发、写作、部署等全流程操作：</li></ul><h3 id="1-初始化与安装"><a href="#1-初始化与安装" class="headerlink" title="1. 初始化与安装"></a><strong>1. 初始化与安装</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo init &lt;folder&gt;</code></td><td>初始化 Hexo 博客项目（默认生成 <code>_config.yml</code>）</td></tr><tr><td><code>npm install hexo-cli -g</code></td><td>全局安装 Hexo 命令行工具</td></tr><tr><td><code>npm install</code></td><td>安装 <code>package.json</code> 中的依赖（首次克隆项目后必运行）</td></tr></tbody></table><h3 id="2-本地开发与调试"><a href="#2-本地开发与调试" class="headerlink" title="2. 本地开发与调试"></a><strong>2. 本地开发与调试</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo server</code> 或 <code>hexo s</code></td><td>启动本地服务器（默认 <code>http://localhost:4000</code>）</td></tr><tr><td><code>hexo s --debug</code></td><td>启用调试模式（显示详细日志）</td></tr><tr><td><code>hexo s -p 5000</code></td><td>指定端口（如 <code>5000</code>）运行服务器</td></tr></tbody></table><h3 id="3-内容创作与管理"><a href="#3-内容创作与管理" class="headerlink" title="3. 内容创作与管理"></a><strong>3. 内容创作与管理</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo new &quot;文章标题&quot;</code> 或 <code>hexo n</code></td><td>创建新文章（在 <code>source/_posts/</code> 下生成 <code>.md</code> 文件）</td></tr><tr><td><code>hexo new page &quot;关于&quot;</code></td><td>创建新页面（如 <code>source/about/index.md</code>）</td></tr><tr><td><code>hexo publish &lt;filename&gt;</code></td><td>发布草稿（从 <code>_drafts/</code> 移动到 <code>_posts/</code>）</td></tr></tbody></table><h3 id="4-生成静态文件"><a href="#4-生成静态文件" class="headerlink" title="4. 生成静态文件"></a><strong>4. 生成静态文件</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo generate</code> 或 <code>hexo g</code></td><td>生成静态文件到 <code>public/</code> 目录</td></tr><tr><td><code>hexo g --watch</code></td><td>监听文件变动并自动重新生成</td></tr><tr><td><code>hexo clean</code></td><td>清除缓存和已生成的 <code>public/</code> 文件夹</td></tr></tbody></table><h3 id="5-部署到远程"><a href="#5-部署到远程" class="headerlink" title="5. 部署到远程"></a><strong>5. 部署到远程</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hexo deploy</code> 或 <code>hexo d</code></td><td>部署到 <code>_config.yml</code> 中配置的远程仓库</td></tr><tr><td><code>hexo g -d</code> 或 <code>hexo d -g</code></td><td>生成静态文件并立即部署（最常用）</td></tr><tr><td><code>hexo clean &amp;&amp; hexo g -d</code></td><td>彻底清理后重新生成并部署</td></tr></tbody></table><h3 id="6-插件与主题管理"><a href="#6-插件与主题管理" class="headerlink" title="6. 插件与主题管理"></a><strong>6. 插件与主题管理</strong></h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>npm install hexo-plugin-name --save</code></td><td>安装 Hexo 插件（如 <code>hexo-deployer-git</code>）</td></tr><tr><td><code>git clone &lt;theme-url&gt; themes/主题名</code></td><td>手动安装主题</td></tr><tr><td><code>npm update</code></td><td>更新所有依赖插件</td></tr></tbody></table><h3 id="7-实用技巧"><a href="#7-实用技巧" class="headerlink" title="7. 实用技巧"></a><strong>7. 实用技巧</strong></h3><h4 id="（1）自定义文章模板"><a href="#（1）自定义文章模板" class="headerlink" title="（1）自定义文章模板"></a><strong>（1）自定义文章模板</strong></h4><ol><li>在 <code>scaffolds/</code> 下创建自定义模板（如 <code>post.md</code>）。</li><li>新建文章时指定模板：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;标题&quot;</span> --layout post<br></code></pre></td></tr></table></figure></li></ol><h4 id="（2）多设备同步"><a href="#（2）多设备同步" class="headerlink" title="（2）多设备同步"></a><strong>（2）多设备同步</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;你的博客仓库&gt; &amp;&amp; npm install<br></code></pre></td></tr></table></figure><h4 id="（3）调试部署问题"><a href="#（3）调试部署问题" class="headerlink" title="（3）调试部署问题"></a><strong>（3）调试部署问题</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d --debug  <span class="hljs-comment"># 显示详细部署日志</span><br></code></pre></td></tr></table></figure><h3 id="常见问题速查"><a href="#常见问题速查" class="headerlink" title="常见问题速查"></a><strong>常见问题速查</strong></h3><table><thead><tr><th>问题</th><th>解决命令</th></tr></thead><tbody><tr><td>本地更改未生效</td><td><code>hexo clean &amp;&amp; hexo g</code></td></tr><tr><td>部署失败（权限错误）</td><td>检查 <code>_config.yml</code> 的 <code>repo</code> 配置为 SSH&#x2F;HTTPS</td></tr><tr><td>主题样式丢失</td><td>确保主题文件夹存在且 <code>_config.yml</code> 中 <code>theme:</code> 名称正确</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>网站搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
